// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  role              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  UrlShortenerRecord   UrlShortenerRecord? @relation(fields: [urlShortenerRecordId], references: [id])
  urlShortenerRecordId Int?                @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UrlShortenerRecord {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ip String @unique

  history UrlShortenerHistory[]
  Note    Note[]
  File    File[]

  User User?
}

model UrlShortenerHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url                String
  hash               String  @unique
  theme              String  @default("default")
  email              String?
  password           String?
  usePasswordForward Boolean @default(true)
  ogTitle            String?
  ogDomain           String?
  ogDescription      String?
  ogImgSrc           String?
  ogImgPublicId      String?
  isBanned           Boolean @default(false)

  UrlShortenerRecord   UrlShortenerRecord @relation(fields: [urlShortenerRecordId], references: [id], onDelete: Cascade)
  UrlForwardMeta       UrlForwardMeta[]
  urlShortenerRecordId Int
  Media                Media[]
  Note                 Note?
  File                 File[]
}

model UrlForwardMeta {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userAgent      String?
  countryCode    String?
  ip             String?
  fromClientSide Boolean  @default(false)

  UrlShortenerHistory   UrlShortenerHistory? @relation(fields: [urlShortenerHistoryId], references: [id], onDelete: Cascade)
  urlShortenerHistoryId Int?

  @@unique([userAgent, ip, urlShortenerHistoryId])
}

model Media {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String  @default("No name")
  type       String?
  url        String?
  externalId String? @unique
  provider   String?

  urlShortenerHistoryId Int?
  UrlShortenerHistory   UrlShortenerHistory? @relation(fields: [urlShortenerHistoryId], references: [id], onDelete: SetNull)

  noteId Int?
  Note   Note? @relation(fields: [noteId], references: [id], onDelete: SetNull)
  File   File?
}

model Note {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hash     String  @unique
  uid      String  @unique
  title    String?
  text     String  @db.Text
  email    String?
  password String?
  Media    Media[]

  UrlShortenerRecord   UrlShortenerRecord @relation(fields: [urlShortenerRecordId], references: [id], onDelete: Cascade)
  urlShortenerRecordId Int

  UrlShortenerHistory   UrlShortenerHistory? @relation(fields: [urlShortenerHistoryId], references: [id], onDelete: Cascade)
  urlShortenerHistoryId Int                  @unique
}

model File {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hash      String   @unique

  UrlShortenerHistory   UrlShortenerHistory? @relation(fields: [urlShortenerHistoryId], references: [id], onDelete: Cascade)
  urlShortenerHistoryId Int

  UrlShortenerRecord   UrlShortenerRecord? @relation(fields: [urlShortenerRecordId], references: [id])
  urlShortenerRecordId Int?

  Media   Media @relation(fields: [mediaId], references: [id])
  mediaId Int   @unique
}

model Blob {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ip           String?
  originalName String
  fileName     String  @unique
  fileSize     Int
  fileType     String?
  uploadPath   String
}
